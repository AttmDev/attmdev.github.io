{"version":3,"sources":["logo.svg","App.js","registerServiceWorker.js","index.js"],"names":["App","className","src","logo","alt","this","props","dataAsString","schema","uischema","Component","connect","state","JSON","stringify","getData","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","store","initJsonFormsStore","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"qzDAAe,MAA0B,iC,0CCSnCA,E,4JACJ,WACE,OACE,gCACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,oBAAIH,UAAU,YAAd,8CACA,mBAAGA,UAAU,YAAb,yCAIJ,oBAAIA,UAAU,aAAd,wBACA,qBAAKA,UAAU,eAAf,SACE,8BAAMI,KAAKC,MAAMC,iBAGnB,qBAAKN,UAAU,WAAf,SACE,cAAC,mBAAD,CACEO,OAAQA,EACRC,SAAUA,QAKnB,K,GAzBeC,aAiCHC,eAJS,SAAAC,GACtB,MAAO,CAAEL,aAAcM,KAAKC,UAAUC,kBAAQH,GAAQ,KAAM,GAC7D,GAEuC,KAAzBD,CAA+BX,GChCxCgB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBlB,QACfY,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,sCAGjB,CACF,CACF,IACAC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,EAC5D,GACJ,C,WCpDKC,EAAQC,6BARD,CACX,KAAQ,uBACR,YAAe,oDACf,MAAQ,EACR,WAAc,QACd,OAAU,GAG2B/B,EAAQC,GAK/C+B,IAASC,OACP,cAAC,IAAD,CAAUH,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFI,SAASC,eAAe,SDTX,WACb,GAA6C,kBAAmBnB,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,qBAAwB3B,OAAOC,UAC3C2B,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMsB,qBAAN,sBAEP7B,EAwCV,SAAiCO,GAE/ByB,MAAMzB,GACHI,MAAK,SAAAsB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C7B,UAAUC,cAAc6B,MAAM3B,MAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,MAAK,WAC7BT,OAAOC,SAASqC,QACjB,GACF,IAGDlC,EAAgBC,EAEnB,IACAa,OAAM,WACLF,QAAQC,IACN,gEAEH,GACJ,CA/DOsB,CAAwBlC,GAGxBD,EAAgBC,EAEnB,GACF,CACF,CCZDmC,E","file":"static/js/main.0edc1591.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.2d27ead7.svg\";","import {connect} from 'react-redux';\r\nimport React, {Component} from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport schema from './schema.json';\r\nimport uischema from './uischema.json';\r\nimport {DispatchRenderer, getData} from '@jsonforms/core';\r\n\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"App\">\r\n          <header className=\"App-header\">\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            <h1 className=\"App-title\">Welcome to JSON Forms with React</h1>\r\n            <p className=\"App-intro\">More Forms. Less Code.</p>\r\n          </header>\r\n        </div>\r\n\r\n        <h4 className=\"data-title\">Bound data</h4>\r\n        <div className=\"data-content\">\r\n          <pre>{this.props.dataAsString}</pre>\r\n        </div>\r\n\r\n        <div className=\"demoform\">\r\n          <DispatchRenderer\r\n            schema={schema}\r\n            uischema={uischema}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return { dataAsString: JSON.stringify(getData(state), null, 2) }\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(App);\r\n\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport { initJsonFormsStore, registerRenderer } from '@jsonforms/core';\r\nimport schema from './schema.json';\r\nimport uischema from './uischema.json';\r\nimport '@jsonforms/material-renderers';\r\n//import RatingControl, {ratingControlTester} from './rating.control';\r\n\r\nconst data = {\r\n  'name': 'Send email to Adrian',\r\n  'description': 'Confirm if you have passed the subject\\nHerby ...',\r\n  'done': true,\r\n  'recurrence': 'Daily',\r\n  'rating': 3,\r\n};\r\n\r\nconst store = initJsonFormsStore(data, schema, uischema);\r\n\r\n// Uncomment this line (and respective import) to register our custom renderer\r\n//store.dispatch(registerRenderer(ratingControlTester, RatingControl));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}